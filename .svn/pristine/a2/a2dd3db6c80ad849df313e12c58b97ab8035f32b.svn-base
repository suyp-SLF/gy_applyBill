//package kd.cus.wb.usethe;
//
//import com.sun.org.apache.xml.internal.serialize.OutputFormat;
//import com.sun.org.apache.xml.internal.serialize.XMLSerializer;
//import kd.bos.bill.AbstractBillPlugIn;
//import kd.bos.context.RequestContext;
//import kd.bos.exception.KDBizException;
//import kd.bos.form.control.events.ItemClickEvent;
//import kd.bos.logging.Log;
//import kd.bos.logging.LogFactory;
//import kd.bos.servicehelper.parameter.SystemParamServiceHelper;
//import org.apache.axis.Constants;
//import org.apache.axis.MessageContext;
//import org.apache.axis.client.Call;
//import org.apache.axis.client.Service;
//import org.apache.axis.encoding.XMLType;
//import org.apache.axis.encoding.ser.BeanDeserializerFactory;
//import org.apache.axis.encoding.ser.BeanSerializerFactory;
//import org.apache.axis.message.SOAPHeaderElement;
//import org.apache.axis.transport.http.HTTPConstants;
//import org.apache.commons.lang3.StringUtils;
//import org.w3c.dom.Document;
//import org.w3c.dom.Element;
//import org.w3c.dom.Node;
//import org.xml.sax.InputSource;
//import org.xml.sax.SAXException;
//
//import javax.mail.Session;
//import javax.servlet.http.HttpServletRequest;
//import javax.xml.bind.JAXBContext;
//import javax.xml.bind.JAXBException;
//import javax.xml.bind.Marshaller;
//import javax.xml.namespace.QName;
//import javax.xml.parsers.DocumentBuilder;
//import javax.xml.parsers.DocumentBuilderFactory;
//import javax.xml.parsers.ParserConfigurationException;
//import javax.xml.rpc.ParameterMode;
//import javax.xml.rpc.ServiceException;
//import java.io.ByteArrayOutputStream;
//import java.io.IOException;
//import java.io.StringReader;
//import java.io.StringWriter;
//import java.rmi.RemoteException;
//import java.util.HashMap;
//import java.util.Map;
//
//public class OAarchiveoppoPlugin extends AbstractBillPlugIn {
//    private static final Log logger = LogFactory.getLog(OAarchiveoppoPlugin.class);
//    /*获得的session*/
//    private static String SESSION = "";
//
//    //参数
//    private static String URL = "";
//    private static String ACCOUNT = "";
//    private static String PASSWORD = "";
//
//    //配置参数
//    private static Map<String, Object> fields = new HashMap<>();
//
//    static {
//        fields = SystemParamServiceHelper.loadBillParameterObjectFromCache("bfgy_printapplication");
//        System.out.println(1);
//
//        URL = (String) fields.get("bfgy_wb_url");
//        ACCOUNT = (String) fields.get("bfgy_wb_account");
//        PASSWORD = (String) fields.get("bfgy_wb_password");
//    }
//
//    public void itemClick(ItemClickEvent evt) {
//        super.itemClick(evt);
//        if ("Archive_wb".equalsIgnoreCase(evt.getOperationKey())) {
//            if (StringUtils.isBlank(SESSION)) {
//                //登录获得session
//                try {
//                    updateSession();
//                } catch (Exception e) {
//                    throw new KDBizException(e.getMessage());
//                }
//            }
//            try {
//                creatFlow();
//            } catch (Exception e) {
//                e.printStackTrace();
//                throw new KDBizException(e.getMessage());
//            }
//
//            //
//        }
//    }
//
//
//    /**
//     * 登录更新
//     *
//     * @throws ParserConfigurationException
//     * @throws IOException
//     * @throws SAXException
//     * @throws ServiceException
//     */
//    private void updateSession() throws ParserConfigurationException, IOException, SAXException, ServiceException {
//
//        Service serv = new Service();
//        Call call = (Call) serv.createCall();
//        call.setTargetEndpointAddress(URL);
//        call.setOperationName(new QName("http://localhost/services/DocService", "login", "doc"));
//        call.addParameter(new QName("http://localhost/services/DocService", "in0", "doc"), Constants.XSD_STRING, ParameterMode.IN);
//        call.addParameter(new QName("http://localhost/services/DocService", "in1", "doc"), Constants.XSD_STRING, ParameterMode.IN);
//        call.addParameter(new QName("http://localhost/services/DocService", "in2", "doc"), Constants.XSD_INT, ParameterMode.IN);
//        call.addParameter(new QName("http://localhost/services/DocService", "in3", "doc"), Constants.XSD_STRING, ParameterMode.IN);
//
//        call.setEncodingStyle("UTF-8");
//        call.setReturnType(XMLType.XSD_STRING);
//        String result = (String) call.invoke(new Object[]{ACCOUNT, PASSWORD, 0, IP()});
//        if (32 == result.length()) {
//            SESSION = result;
//        } else {
//            throw new KDBizException("登录失败");
//        }
//    }
//
//    /**
//     * 创建流程
//     */
//    private String creatFlow() throws ServiceException, RemoteException {
//
//        //主字段
//        WorkflowRequestTableField[] wrti = new WorkflowRequestTableField[4]; //字段信息
//        wrti[0] = new WorkflowRequestTableField();
//        wrti[0].setFieldName("mutiresource");//被留言人
//        wrti[0].setFieldValue("111");//被留言人字段的值，111为被留言人id
//        wrti[0].setView(true);//字段是否可见
//        wrti[0].setEdit(true);//字段是否可编辑
//
//        wrti[1] = new WorkflowRequestTableField();
//        wrti[1].setFieldName("remark");//留言内容
//        wrti[1].setFieldValue("test");
//        wrti[1].setView(true);
//        wrti[1].setEdit(true);
//
//        wrti[2] = new WorkflowRequestTableField();
//        wrti[2].setFieldName("resource_n");//留言人
//        wrti[2].setFieldValue("111");
//        wrti[2].setView(true);
//        wrti[2].setEdit(true);
//
//        wrti[3] = new WorkflowRequestTableField();
//        wrti[3].setFieldName("fj2");//附件
//        wrti[3].setFieldType("http:baidu_sylogo1.gif");//http:开头代表该字段为附件字段
//        wrti[3].setFieldValue("http://www.baidu.com/img/baidu_sylogo1.gif");//附件地址
//        wrti[3].setView(true);
//        wrti[3].setEdit(true);
//
//        WorkflowRequestTableRecord[] wrtri = new WorkflowRequestTableRecord[1];//主字段只有一行数据
//        wrtri[0] = new WorkflowRequestTableRecord();
//        wrtri[0].setWorkflowRequestTableFields(wrti);
//
//        WorkflowMainTableInfo wmi = new WorkflowMainTableInfo();
//        wmi.setRequestRecords(wrtri);
//
//
//        //明细字段
//        WorkflowDetailTableInfo wdti[] = new WorkflowDetailTableInfo[2];//两个明细表0明细表1,1明细表2
//
//        //明细表1 start
//        wrtri = new WorkflowRequestTableRecord[2];//数据 行数，假设添加2行明细数据
//        //第一行
//        wrti = new WorkflowRequestTableField[3]; //每行3个字段
//        wrti[0] = new WorkflowRequestTableField();
//        wrti[0].setFieldName("yyjmc");//数量
//        wrti[0].setFieldValue("11");
//        wrti[0].setView(true);
//        wrti[0].setEdit(true);
//
//        wrti[1] = new WorkflowRequestTableField();
//        wrti[1].setFieldName("dj");//单价
//        wrti[1].setFieldValue("2");
//        wrti[1].setView(true);
//        wrti[1].setEdit(true);
//
//        wrti[2] = new WorkflowRequestTableField();
//        wrti[2].setFieldName("xj");//小记
//        wrti[2].setFieldValue("22");
//        wrti[2].setView(true);
//        wrti[2].setEdit(true);
//
//        wrtri[0] = new WorkflowRequestTableRecord();
//        wrtri[0].setWorkflowRequestTableFields(wrti);
//
//        //第二行
//        wrti = new WorkflowRequestTableField[3]; //每行3个字段
//        wrti[0] = new WorkflowRequestTableField();
//        wrti[0].setFieldName("sl");//数量
//        wrti[0].setFieldValue("110");
//        wrti[0].setView(true);
//        wrti[0].setEdit(true);
//
//        wrti[1] = new WorkflowRequestTableField();
//        wrti[1].setFieldName("dj");//单价
//        wrti[1].setFieldValue("2");
//        wrti[1].setView(true);
//        wrti[1].setEdit(true);
//
//        wrti[2] = new WorkflowRequestTableField();
//        wrti[2].setFieldName("xj");//小记
//        wrti[2].setFieldValue("220");
//        wrti[2].setView(true);
//        wrti[2].setEdit(true);
//
//        wrtri[1] = new WorkflowRequestTableRecord();
//        wrtri[1].setWorkflowRequestTableFields(wrti);
//
//        wdti[0] = new WorkflowDetailTableInfo();
//        wdti[0].setWorkflowRequestTableRecords(wrtri);//加入明细表1的数据
//        //明细表1 end
//
//
//        //明细表2 start
//        wrtri = new WorkflowRequestTableRecord[1];//数据行数，假设添加1行明细数据
//
//        //第一行
//        wrti = new WorkflowRequestTableField[3]; //每行3个字段
//        wrti[0] = new WorkflowRequestTableField();
//        wrti[0].setFieldName("cl3");//
//        wrti[0].setFieldValue("11");
//        wrti[0].setView(true);
//        wrti[0].setEdit(true);
//
//        wrti[1] = new WorkflowRequestTableField();
//        wrti[1].setFieldName("cl1111");//
//        wrti[1].setFieldValue("2");
//        wrti[1].setView(true);
//        wrti[1].setEdit(true);
//
//        wrtri[0] = new WorkflowRequestTableRecord();
//        wrtri[0].setWorkflowRequestTableFields(wrti);
//
//        wdti[1] = new WorkflowDetailTableInfo();
//        wdti[1].setWorkflowRequestTableRecords(wrtri);//加入明细表2的数据
//        //明细表2 end
//
//        WorkflowBaseInfo wbi = new WorkflowBaseInfo();
//        wbi.setWorkflowId("5");//workflowid 5 代表内部留言
//
//        WorkflowRequestInfo wri = new WorkflowRequestInfo();//流程基本信息
//        wri.setCreatorId("111");//创建人id
//        wri.setRequestLevel("2");//0 正常，1重要，2紧急
//        wri.setRequestName("留言测试接口");//流程标题
//        wri.setWorkflowMainTableInfo(wmi);//添加主字段数据
//        wri.setWorkflowBaseInfo(wbi);
//        wri.setWorkflowDetailTableInfos(wdti);
//
//        //执行创建流程接口
//        Service serv = new Service();
//        Call call = (Call) serv.createCall();
//        call.removeProperty("xsd");
//        call.setTargetEndpointAddress("http://166.111.116.3/services/WorkflowService");
//        call.setOperationName(new QName("webservices.services.weaver.com.cn", "doCreateWorkflowRequest"));
//        QName qn = new QName("webservices.services.weaver.com.cn", "in0");
////        call.registerTypeMapping(WorkflowRequestInfo.class,new QName("webservices.services.weaver.com.cn", "in0"), new BeanSerializerFactory(WorkflowRequestInfo.class,qn), new BeanDeserializerFactory(WorkflowRequestInfo.class, qn));
//
//        Element info = xml(wri);
//
//        call.addParameter(new QName("webservices.services.weaver.com.cn", "in0"), Constants.XSD_STRING, WorkflowRequestInfo.class, ParameterMode.IN);
//        call.addParameter(new QName("webservices.services.weaver.com.cn", "in1"), Constants.XSD_INT, ParameterMode.IN);
//        call.setEncodingStyle("UTF-8");
//        call.setReturnType(XMLType.XSD_STRING);
//
//        String result = (String) call.invoke(new Object[]{info, 84});
//        return null;
//    }
//
//    /**
//     * 获得本地ip
//     *
//     * @return
//     */
//    private String IP() {
//        String ip = RequestContext.get().getLoginIP();
//        return ip;
//    }
//
//    private Element xml(WorkflowRequestInfo baseinfo){
//        JAXBContext jc = null;
//        try {
//            //根据Person类生成上下文对象
//            jc = JAXBContext.newInstance(WorkflowRequestInfo.class);
//            //从上下文中获取Marshaller对象，用作将bean编组(转换)为xml
//            Marshaller ma = jc.createMarshaller();
//            //以下是为生成xml做的一些配置
//            //格式化输出，即按标签自动换行，否则就是一行输出
//            ma.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);
//            //设置编码（默认编码就是utf-8）
//            ma.setProperty(Marshaller.JAXB_ENCODING, "UTF-8");
//            //是否省略xml头信息，默认不省略（false）
//            ma.setProperty(Marshaller.JAXB_FRAGMENT, true);
////            ma.setProperty();
//            //编组
//
//            //创建 Document
//            DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
//            DocumentBuilder db = dbf.newDocumentBuilder();
//            Document document = db.newDocument();
//
//            ma.marshal(baseinfo,document);
//            Element element = document.getDocumentElement();
//
//            element.toString();
//
//
////            OutputFormat format = new OutputFormat(element,"UTF-8",true);
////            //format.setIndenting(true);//设置是否缩进，默认为true
////            //format.setIndent(4);//设置缩进字符数
////            //format.setPreserveSpace(false);//设置是否保持原来的格式,默认为 false
////            //format.setLineWidth(500);//设置行宽度
////            StringWriter stringWriter = new StringWriter();
////            XMLSerializer serializer = new XMLSerializer(stringWriter,format);
////            serializer.asDOMSerializer();
////            serializer.serialize(element);
////            String docString = stringWriter.toString();
//
//
//            return element;
//        } catch (Exception e) {
//            e.printStackTrace();
//        }
//        return null;
//    }
//}
