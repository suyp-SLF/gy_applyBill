package kd.cus.wb.cas.offerfile;

import kd.bos.dataentity.entity.DynamicObject;
import kd.bos.dataentity.entity.DynamicObjectCollection;
import kd.bos.dataentity.metadata.dynamicobject.DynamicObjectType;
import kd.bos.dataentity.utils.OrmUtils;
import kd.bos.dataentity.utils.StringUtils;
import kd.bos.entity.ExtendedDataEntity;
import kd.bos.entity.ExtendedDataEntitySet;
import kd.bos.entity.botp.plugin.AbstractConvertPlugIn;
import kd.bos.entity.botp.plugin.args.*;
import kd.bos.entity.botp.runtime.AbstractConvertServiceArgs;
import kd.bos.orm.query.QCP;
import kd.bos.orm.query.QFilter;
import kd.bos.servicehelper.BusinessDataServiceHelper;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

/**
 * 报盘文件|万宝转换插件，
 *
 * @author suyp
 */
public class OfferfileConvertPlugin extends AbstractConvertPlugIn {

    private List<String> billno = new ArrayList<>();

    @Override
    public void beforeGetSourceData(BeforeGetSourceDataEventArgs e) {
        System.out.println(1);
    }



    @Override
    public void afterBuildDrawFilter(AfterBuildDrawFilterEventArgs e) {
        DynamicObject dst = e.getTargetDataEntity();
        if (null != dst.getDynamicObject("bfgy_basedatafield") && dst.getDynamicObject("bfgy_basedatafield").getDynamicObjectCollection("currency").size() > 0){
            DynamicObject dy = dst.getDynamicObject("bfgy_basedatafield").getDynamicObjectCollection("currency").get(0);
            QFilter qfilter = e.getPlugFilter();
            String currency = dy.getDynamicObject("fbasedataid").getString("number");
            if (null != qfilter) {
                qfilter.and(new QFilter("paycurrency.number", QCP.equals, currency).and(new QFilter("currency.number", QCP.equals, currency)));
//                QFilter qFilter_zld_3 = new QFilter("bfgy_exportstate_wb",QCP.equals,false);//是否导出
//                QFilter qFilter_zld_4 = new QFilter("settleorg.number",QCP.equals,"8018");//结算组织
//                QFilter qFilter_zld_5 = new QFilter("billstatus",QCP.equals,"C");//单据状态
//
//                QFilter qFilter_zld_1 = new QFilter("bfgy_businesstype_wb.number",QCP.not_equals,"WBZC07");//业务类型：现场费
//                QFilter qFilter_zld_2 = new QFilter("bfgy_fundingtype.number",QCP.not_equals,"B");//拨款类型
//                QFilter qFilter_zld_6 = new QFilter("billtype",QCP.equals,"WBap_payapply_oth_BT_S_04");//单据类型：
                e.setPlugFilter(qfilter);
            }else {
                e.setPlugFilter(new QFilter("paycurrency.number", QCP.equals, currency).and(new QFilter("currency.number", QCP.equals, currency)));
            }

        }
    }

    @Override
    public void afterGetSourceData(AfterGetSourceDataEventArgs e) {
        billno = e.getSourceRows().stream().map(i->i.getString("billno")).collect(Collectors.toList());
        System.out.println(3);
    }

    @Override
    public void afterConvert(AfterConvertEventArgs e) {
        super.afterConvert(e);
        ExtendedDataEntitySet entitySet = e.getTargetExtDataEntitySet();
        ExtendedDataEntity[] entities = entitySet.FindByEntityKey("bfgy_bfgy_agencyentry");
        List<ExtendedDataEntity> copyDataEntitys = new ArrayList<>();
        QFilter[] qFilters = {new QFilter("billno", QCP.in, billno)};
        DynamicObject[] this_dys = BusinessDataServiceHelper.load("ap_payapply", "applyamount,billno,e_asstacttype,e_asstact,e_assacct,paycurrency,billtype,bfgy_skf_wb,bfgy_skzh_wb", qFilters);
        for (int i = 0; i < this_dys.length; i++) {
            DynamicObject dataEntity = entities[i].getDataEntity();
            DynamicObject this_dy = this_dys[i];
            if (null != this_dy) {
//                DynamicObject dataEntity = new DynamicObject(type);
                if ("WBap_payapply_BT_S_01".equalsIgnoreCase(this_dy.getDynamicObject("billtype").getString("number")) || "WBap_payapply_BT_S_02".equalsIgnoreCase(this_dy.getDynamicObject("billtype").getString("number"))) {
                    DynamicObjectCollection dycols = this_dy.getDynamicObjectCollection("bfgy_collectdetail_wb");
                    List<String> names = new ArrayList<>();
                    List<String> accts = new ArrayList<>();
                    for (DynamicObject item : dycols) {
                        if (StringUtils.isNotBlank(item.getString("bfgy_skf_wb"))) {
//                    name += " " + item.getString("e_asstact");
                            if (StringUtils.isNotBlank(item.getString("bfgy_skf_wb"))) {
                                names.add(item.getDynamicObject("bfgy_skf_wb").getString("name"));
                            }
                        }
                        if (StringUtils.isNotBlank(item.getString("bfgy_skzh_wb"))) {
//                    acct += " " + item.getString("e_assacct");

                            accts.add(item.getString("bfgy_skzh_wb"));
                        }

                    }
                    dataEntity.set("bfgy_bfgy_reciptaccount", String.join(",", accts));
                    dataEntity.set("bfgy_bfgy_recivename", String.join(",", names));
                    dataEntity.set("bfgy_bfgy_zldno",this_dy.getString("billno"));
                    DynamicObject currency = this_dy.getDynamicObject("paycurrency");
                    dataEntity.set("bfgy_currencyfield", currency);
                    dataEntity.set("bfgy_bfgy_applyamount",this_dy.getBigDecimal("applyamount"));
//                    copyDataEntitys.add(new ExtendedDataEntity(dataEntity, i, 0));
                } else {
                    DynamicObjectCollection dycols = this_dy.getDynamicObjectCollection("entry");
                    List<String> names = new ArrayList<>();
                    List<String> accts = new ArrayList<>();
                    for (DynamicObject item : dycols) {

                        if (StringUtils.isNotBlank(item.getString("e_asstact"))) {
//                    name += " " + item.getString("e_asstact");
                            if (StringUtils.isNotBlank(item.getString("e_asstact"))) {
                                names.add(item.getDynamicObject("e_asstact").getString("name"));
                            }
                        }
                        if (StringUtils.isNotBlank(item.getString("e_assacct"))) {
//                    acct += " " + item.getString("e_assacct");

                            accts.add(item.getString("e_assacct"));
                        }

                    }
                    dataEntity.set("bfgy_bfgy_reciptaccount", String.join(",", accts));
                    dataEntity.set("bfgy_bfgy_recivename", String.join(",", names));
                    dataEntity.set("bfgy_bfgy_zldno",this_dy.getString("billno"));
                    DynamicObject currency = this_dy.getDynamicObject("paycurrency");
                    dataEntity.set("bfgy_currencyfield", currency);
                    dataEntity.set("bfgy_bfgy_applyamount",this_dy.getBigDecimal("applyamount"));
//                    copyDataEntitys.add(new ExtendedDataEntity(dataEntity, i, 0));
                }
            }
        }
//        entities = copyDataEntitys.toArray(new ExtendedDataEntity[copyDataEntitys.size()]);
//        e.getTargetExtDataEntitySet().AddExtendedDataEntities("bfgy_bfgy_agencyentry",copyDataEntitys);
//        System.out.println(1);
    }


//        ExtendedDataEntitySet entitySet = e.getTargetExtDataEntitySet();
//        ExtendedDataEntity[] entities = entitySet.FindByEntityKey("bfgy_bfgy_agencyentry");
//        ExtendedDataEntity[] entities_jun = entitySet.FindByEntityKey("bfgy_agencyentry");
//        for (int i = 0; i < entities_jun.length; i++) {
//            ExtendedDataEntity entity = entities_jun[i];
//            DynamicObject dataEntity = entity.getDataEntity();
//            QFilter[] qFilters = {new QFilter("billno", QCP.equals, dataEntity.getString("bfgy_bfgy_zldno"))};
//            DynamicObject this_dy = BusinessDataServiceHelper.loadSingle("ap_payapply", "e_asstacttype,e_asstact,e_assacct,paycurrency,billtype,bfgy_skf_wb,bfgy_skzh_wb", qFilters);
//            if (null != this_dy) {
//                DynamicObjectCollection dycols = this_dy.getDynamicObjectCollection("bfgy_collectdetail_wb");
//                List<String> names = new ArrayList<>();
//                List<String> accts = new ArrayList<>();
//                for (DynamicObject item : dycols) {
//
//                    if (StringUtils.isNotBlank(item.getString("bfgy_skf_wb"))) {
////                    name += " " + item.getString("e_asstact");
//                        if (StringUtils.isNotBlank(item.getString("bfgy_skf_wb"))) {
//                            names.add(item.getDynamicObject("bfgy_skf_wb").getString("name"));
//                        }
//                    }
//                    if (StringUtils.isNotBlank(item.getString("bfgy_skzh_wb"))) {
////                    acct += " " + item.getString("e_assacct");
//
//                        accts.add(item.getString("bfgy_skzh_wb"));
//                    }
//
//                }
//                dataEntity.set("bfgy_bfgy_reciptaccount", String.join(",", accts));
//                dataEntity.set("bfgy_bfgy_recivename", String.join(",", names));
//
//                DynamicObject currency = this_dy.getDynamicObject("paycurrency");
//                dataEntity.set("bfgy_currencyfield", currency);
//            }
//        }
//        for (int i = 0; i < entities.length; i++) {
//            ExtendedDataEntity entity = entities[i];
//            DynamicObject dataEntity = entity.getDataEntity();
//            QFilter[] qFilters = {new QFilter("billno", QCP.equals, dataEntity.getString("bfgy_bfgy_zldno"))};
//            DynamicObject this_dy = BusinessDataServiceHelper.loadSingle("ap_payapply", "e_asstacttype,e_asstact,e_assacct,paycurrency,billtype,bfgy_skf_wb,bfgy_skzh_wb", qFilters);
//            if (null != this_dy) {
//                DynamicObjectCollection dycols = this_dy.getDynamicObjectCollection("entry");
//                List<String> names = new ArrayList<>();
//                List<String> accts = new ArrayList<>();
//                for (DynamicObject item : dycols) {
//
//                    if (StringUtils.isNotBlank(item.getString("e_asstact"))) {
////                    name += " " + item.getString("e_asstact");
//                        if (StringUtils.isNotBlank(item.getString("e_asstact"))) {
//                            names.add(item.getDynamicObject("e_asstact").getString("name"));
//                        }
//                    }
//                    if (StringUtils.isNotBlank(item.getString("e_assacct"))) {
////                    acct += " " + item.getString("e_assacct");
//
//                        accts.add(item.getString("e_assacct"));
//                    }
//
//                }
//                dataEntity.set("bfgy_bfgy_reciptaccount", String.join(",", accts));
//                dataEntity.set("bfgy_bfgy_recivename", String.join(",", names));
//
//                DynamicObject currency = this_dy.getDynamicObject("paycurrency");
//                dataEntity.set("bfgy_currencyfield", currency);
//            }
//        }
    }
