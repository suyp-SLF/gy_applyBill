package kd.cus.wb.params.printapplication;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.math.BigDecimal;
import java.net.MalformedURLException;
import java.net.URL;
import java.rmi.RemoteException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.Map.Entry;
import java.util.stream.Collector;
import java.util.stream.Collectors;

import org.apache.axis.AxisFault;
import org.apache.axis.client.Service;
import org.apache.axis.encoding.Base64;
import org.apache.commons.lang3.StringUtils;

import com.alibaba.fastjson.JSONObject;
import com.itextpdf.text.pdf.PdfStructTreeController.returnType;

import kd.bos.context.RequestContext;
import kd.bos.dataentity.OperateOption;
import kd.bos.dataentity.entity.DynamicObject;
import kd.bos.dataentity.entity.DynamicObjectCollection;
import kd.bos.entity.ExtendedDataEntity;
import kd.bos.entity.plugin.AbstractOperationServicePlugIn;
import kd.bos.entity.plugin.AddValidatorsEventArgs;
import kd.bos.entity.validate.AbstractValidator;
import kd.bos.exception.KDBizException;
import kd.bos.exception.KDException;
import kd.bos.fileservice.FileService;
import kd.bos.fileservice.FileServiceFactory;
import kd.bos.orm.query.QCP;
import kd.bos.orm.query.QFilter;
import kd.bos.servicehelper.BusinessDataServiceHelper;
import kd.bos.servicehelper.operation.OperationServiceHelper;
import kd.bos.servicehelper.operation.SaveServiceHelper;
import kd.bos.servicehelper.parameter.SystemParamServiceHelper;
import kd.bos.servicehelper.user.UserServiceHelper;
import kd.cus.wb.Client.DocAttachment;
import kd.cus.wb.Client.DocInfo;
import kd.cus.wb.Client.DocServiceHttpBindingStub;
import kd.cus.wb.FWsecrets.SecretsUpdateHttpBindingStub;
import kd.cus.wb.FWworkflow.WorkflowBaseInfo;
import kd.cus.wb.FWworkflow.WorkflowDetailTableInfo;
import kd.cus.wb.FWworkflow.WorkflowMainTableInfo;
import kd.cus.wb.FWworkflow.WorkflowRequestInfo;
import kd.cus.wb.FWworkflow.WorkflowRequestTableField;
import kd.cus.wb.FWworkflow.WorkflowRequestTableRecord;
import kd.cus.wb.FWworkflow.WorkflowServiceHttpBindingStub;
import kd.cus.wb.ar.applybill.AppbillOppoPlugin.WriteMeetingOpinionValidator;

public class CreateFlowToFWOppoPlugin extends AbstractOperationServicePlugIn{
	
	/*获得的session*/
    private static String SESSION = "";
    
    private String CURRENCTUSERID = "";

    //参数
    private static String URL = "";
    private static String ACCOUNT = "";
    private static String PASSWORD = "";
    public static String CREATEURL = "";
    private static String USERURL = "";
    private static String DOCURL = "";
    private static String USERFIELD = "";
    private static String USTERTYPE = "";
    private static Boolean ISBUFFER = true;
    private static String BUFFER = "";
    public static String SECRETSURL = "";
    private static String ORGURL = "";
    private static String ORGFIELD = "";
    private static Boolean ISORGBUFFER = true;
    private static String ORGBUFFER = "";
    private static String SECURITYTYPE = "";
    private static String SECURITYTIME = "";
    
    private String securityClass = null;//密级
    private String securityTime = null;//保密期限
    private String reason = null;//用印事由
    private String contract = null;//采购合同号
    private String from = null;//来源单号
    private String sealType = null;//印章类型
    private String seal = null;//印章
    private String billType = null;//单据类型
    private String departmentLeader = null;//部门领导
    private String printer = null;//部门领导
    private String phone = null;//电话
    private String note = null;//备注
    
    private static final String HEAD_CODE = "bfgy_fields";
    private static final String ENTRYS_CODE = "bfgy_entrys";
    private static final String MAP_CODE = "bfgy_mapentry";
    private static DynamicObjectCollection HEAD_VALUE = null;
    private static DynamicObjectCollection ENTRYS_VALUE = null;
    private static DynamicObjectCollection Map_VALUE = null;
    
    private static Map<String,HeadEntity> head_value_map = new HashMap<String, HeadEntity>();
    private static Map<String, Map<String, BodySubentryEntity>> entry_value_map = new HashMap<String, Map<String,BodySubentryEntity>>();
    private static Map<String,Map<String,MapEntity>> map_value_map = new HashMap<String,Map<String,MapEntity>>();
  //配置参数
    private static Map<String, Object> fields = new HashMap<>();
	
    static {
        fields = SystemParamServiceHelper.loadBillParameterObjectFromCache("bfgy_printapplication");

        URL = (String) fields.get("bfgy_wb_url");//地址
        ACCOUNT = (String) fields.get("bfgy_wb_account");//账号
        PASSWORD = (String) fields.get("bfgy_wb_password");//密码
        
        CREATEURL = (String) fields.get("bfgy_create_url");//创建流程地址
        USERURL = (String) fields.get("bfgy_userid_url");//OA用户地址
        DOCURL = (String)fields.get("bfgy_createdoc");//创建文件url
        USERFIELD = (String) fields.get("bfgy_userfield");//苍穹人员对应参数
        USTERTYPE = (String) fields.get("bfgy_usertype");//OA用户类型
        ISBUFFER = (Boolean) fields.get("bfgy_checkbuffer"); //是否缓存泛微ID
        BUFFER = (String) fields.get("bfgy_buffer"); //缓存泛微ID位置
        SECRETSURL = (String) fields.get("bfgy_secret"); //密级url
        ORGURL = (String) fields.get("bfgy_org"); //部门url
        ORGFIELD = (String) fields.get("bfgy_orgfield"); //
        ISORGBUFFER = (Boolean) fields.get("bfgy_checkorgbuffer"); //
        ORGBUFFER = (String) fields.get("bfgy_orgbuffer"); //
        SECURITYTYPE = (String) fields.get("bfgy_securitytype"); //
        SECURITYTIME = (String) fields.get("bfgy_securitytime"); //
        
        HEAD_VALUE = (DynamicObjectCollection) fields.get(HEAD_CODE);
        ENTRYS_VALUE = (DynamicObjectCollection) fields.get(ENTRYS_CODE);
        Map_VALUE = (DynamicObjectCollection) fields.get(MAP_CODE);
        
        //HEAD get info
        HEAD_VALUE.stream().forEach(m->{
        	String xml = m.getString("bfgy_xmlfield");
        	String type = m.getString("bfgy_type");
        	String field = m.getString("bfgy_billfield");
        	head_value_map.put(xml, new HeadEntity(xml, type, field));
        });
        //Entry get info
        ENTRYS_VALUE.stream().forEach(m->{
        	String name = m.getString("bfgy_entrylogo");
        	DynamicObjectCollection cols = m.getDynamicObjectCollection("bfgy_subentry");
        	
        	List<BodySubentryEntity> lines = new ArrayList<BodySubentryEntity>(); 
        	Map<String, BodySubentryEntity> line_map = new HashMap<>(); 
        	cols.stream().forEach(n->{
        		String xml = n.getString("bfgy_entryxmlfield");
        		String type = n.getString("bfgy_entrytype");
        		String field = n.getString("bfgy_entrylogofield");
        		lines.add(new BodySubentryEntity(xml, type, field));
        		line_map.put(xml, new BodySubentryEntity(xml,type,field));
        	});
        	entry_value_map.put(name, line_map);
        });
        //map get info
        Map<String, List<DynamicObject>> map_value_group = Map_VALUE.stream().collect(Collectors.groupingBy(i->i.getString("bfgy_fieldname")));
        
        map_value_group.forEach((key,value)->{
        	Map<String, MapEntity> line_map = new HashMap<>(); 
        	value.forEach(m->{
        		String field = m.getString("bfgy_fieldname");
            	String oldvalue = m.getString("bfgy_srcvalue");
            	String newvalue = m.getString("bfgy_dstvalue");
            	line_map.put(oldvalue, new MapEntity(field, oldvalue, newvalue));
        	});
        	map_value_map.put(key, line_map);
        });
    }

	@Override
	public void onAddValidators(AddValidatorsEventArgs e) {
		// TODO Auto-generated method stub
		super.onAddValidators(e);
		WriteMeetingOpinionValidator opinionVal = new WriteMeetingOpinionValidator();
		e.addValidator(opinionVal);
	}
	
	public class WriteMeetingOpinionValidator extends AbstractValidator {
		@Override
		public void validate() {
			ExtendedDataEntity[] data = this.getDataEntities();
			if (data.length > 0) {
				Arrays.asList(data).forEach(m->{
					DynamicObject this_dy = m.getDataEntity();
					WorkflowRequestInfo woInfo = getWorkFlowInfo(this_dy);
					Date startTime = new Date();
					String request = JSONObject.toJSONString(woInfo);
					String response = "";
					
					Boolean suc_flow = false;
					Boolean suc_upd = false;
					try {
						String result = postCreateFlow(woInfo, 84);
						if(Integer.parseInt(result) < 0) {
							this.addWarningMessage(m, "OA返回值：" + result + "请根据手册进行返回值确认！");
							response = "OA返回值：" + result + "请根据手册进行返回值确认！";
						}else {
							suc_flow = true;
							String updResult = updateSecurity(result,getSecuritytype(this_dy),getSecuritytime(this_dy));
							if(!"0".equalsIgnoreCase(updResult)) {
								this.addErrorMessage(m, "传输失败！");
								response = "传输失败！";
							}else {
								this.addMessage(m, "传输成功！流程id：" + result);
								response = "传输成功！流程id：" + result;
								suc_upd = true;
							}
						}
					} catch (MalformedURLException|RemoteException e) {
						// TODO Auto-generated catch block
						this.addErrorMessage(m, "传输出错！请检查网络问题！");
						response = "传输出错！请检查网络问题！";
					} 
					Date endTime = new Date();
					long subTime = endTime.getTime() - startTime.getTime();
					
					DynamicObject printapplication_dy = BusinessDataServiceHelper.newDynamicObject("bfgy_printapplication_l");
					printapplication_dy.set("bfgy_source", this_dy.getString("billno"));
					printapplication_dy.set("bfgy_subtime", subTime);
					printapplication_dy.set("bfgy_request_tag", request);
					printapplication_dy.set("bfgy_response_tag", response);
					printapplication_dy.set("bfgy_success", suc_flow&&suc_upd );
					
					SaveServiceHelper.save(new DynamicObject[] {printapplication_dy});
				});
			}
		}
	}
	
	public String getSecuritytype(DynamicObject this_dy) {
		return this_dy.getString(SECURITYTYPE);
	}
	
	public String getSecuritytime(DynamicObject this_dy) {
		return this_dy.getString(SECURITYTIME);
	}
	
	
	/**
	 * 创建流程接口
	 * @param woInfo
	 * @param id
	 * @return
	 * @throws RemoteException
	 * @throws MalformedURLException
	 */
	private String postCreateFlow(WorkflowRequestInfo woInfo, int id) throws RemoteException, MalformedURLException {
		//执行创建流程接口
        String wsdl = CREATEURL;
        String requestStr = "";
        Service service = new Service();
        WorkflowServiceHttpBindingStub stub = new WorkflowServiceHttpBindingStub(new URL(wsdl), service);
        requestStr = stub.doCreateWorkflowRequest(woInfo, id);
        return requestStr;
	}
	
	/**
	 * 执行获得人员接口
	 * @param value
	 * @param type
	 * @return
	 * @throws MalformedURLException
	 * @throws RemoteException
	 */
	private String postGetId(String value, String type) throws MalformedURLException, RemoteException {
		//执行获得人员接口
        String wsdl = USERURL;
        String id = "";
        Service service = new Service();
        WorkflowServiceHttpBindingStub stub = new WorkflowServiceHttpBindingStub(new URL(wsdl), service);
        id = stub.getUserId(type, value);
		return id;
	}
	
	/**
	 * 
	 * @param requestId
	 * @param securitylevel
	 * @param securitylevelperiod
	 * @return
	 * @throws RemoteException
	 * @throws MalformedURLException
	 */
	private String postUpdSecrets(String requestId, String securitylevel,String securitylevelperiod) throws RemoteException, MalformedURLException {
		//执行修改密级
		String wsdl = SECRETSURL;
        String id = "";
        Service service = new Service();
        SecretsUpdateHttpBindingStub stub = new SecretsUpdateHttpBindingStub(new URL(wsdl), service);
        id = stub.updateSecrets(requestId, securitylevel, securitylevelperiod);
		return id;
	}

	/**
	 * 
	 * @param code
	 * @return
	 * @throws MalformedURLException
	 * @throws RemoteException
	 */
	private String postGetOrgId(String code) throws MalformedURLException, RemoteException {
		// 执行获得部门接口
		String wsdl = ORGURL;
		String id = "";
		Service service = new Service();
		SecretsUpdateHttpBindingStub stub = new SecretsUpdateHttpBindingStub(new URL(wsdl), service);
		id = stub.getDeptIdByCode(code);
		JSONObject json = JSONObject.parseObject(id);
		if("0".equalsIgnoreCase(json.getString("resultCode"))){
			return json.getString("deptid");
		}else {
			return "0";
		}
	}
	
	public String updateSecurity(String requestId, String securitylevel, String securitylevelperiod) {
		try {
			securitylevel = mapValueFunction("securitytype",securitylevel);
			securitylevelperiod = mapValueFunction("securitylevelperiod",securitylevelperiod);
			
			String result = postUpdSecrets(requestId, securitylevel, securitylevelperiod);
			
			JSONObject json = JSONObject.parseObject(result);
			
			return json.getString("resultCode");
		} catch (RemoteException | MalformedURLException e) {
			// TODO Auto-generated catch block
			throw new KDBizException("向泛微更新密级出错，请检查相应配置以及网络！");
		}
	}
	
	private String mapValueFunction(String xml, String oldvalue) {
		if (null != map_value_map.get(xml) && null != map_value_map.get(xml).get(oldvalue) && StringUtils.isNotEmpty(map_value_map.get(xml).get(oldvalue).getNewvalue())) {
			return map_value_map.get(xml).get(oldvalue).getNewvalue();
		}else {
			return oldvalue;
		}
	}
	
	/**
	 * 创建用印信息
	 * @param this_dy
	 * @return
	 */
	public WorkflowRequestInfo getWorkFlowInfo(DynamicObject this_dy) {
		List<WorkflowRequestTableField> wrtis_head = new ArrayList<WorkflowRequestTableField>(); //字段信息
		
		//主字段
		head_value_map.forEach((key, value) -> {
			// 映射规则
			String type = value.getType();
			String field = value.getField();
			String xml = value.getXml();

			WorkflowRequestTableField wrti_head = new WorkflowRequestTableField();
			wrti_head.setFieldName(value.getXml());

			if ("A".equalsIgnoreCase(type)) {
				wrti_head.setFieldValue(mapValueFunction(xml,field));
			} else if ("B".equalsIgnoreCase(type)) {
				wrti_head.setFieldValue(mapValueFunction(xml, (String) this_dy.get(field)));
			} else if ("C".equalsIgnoreCase(type)) {
				wrti_head.setFieldValue(getUserId(xml, this_dy.getDynamicObject(field)));
			} else if ("D".equalsIgnoreCase(type)) {
				wrti_head.setFieldValue(getOrgId(xml, this_dy.getDynamicObject(field)));
			}else if("E".equalsIgnoreCase(type)) {
				wrti_head.setFieldValue(getDocInfo(this_dy.getString(field),this_dy.getString("printedfilename")));
        	}else if("F".equalsIgnoreCase(type)) {
        		wrti_head.setFieldValue(getTime(this_dy.getDate(field)));
        	}
			wrti_head.setView(true);
			wrti_head.setEdit(true);
			wrtis_head.add(wrti_head);
		});
		
		WorkflowRequestTableRecord[] wrtri_head = new WorkflowRequestTableRecord[1];//主字段只有一行数据
		wrtri_head[0] = new WorkflowRequestTableRecord();
		wrtri_head[0].setWorkflowRequestTableFields(wrtis_head.toArray(new WorkflowRequestTableField[wrtis_head.size()]));
        
        WorkflowMainTableInfo wmi_head = new WorkflowMainTableInfo();
        wmi_head.setRequestRecords(wrtri_head);
        
        //明细字段
        
        
        List<WorkflowDetailTableInfo> wdtis_entry = new ArrayList<>();
        entry_value_map.forEach((key, value)->{
        	DynamicObjectCollection this_dycols = this_dy.getDynamicObjectCollection(key);
        	
        	//单表信息
        	WorkflowDetailTableInfo wdti_entry = new WorkflowDetailTableInfo();
        	
        	List<WorkflowRequestTableRecord> wrtris_entry = new ArrayList<>();
        	this_dycols.forEach(col_dy->{
        		
        		//单行信息
        		WorkflowRequestTableRecord wrtri_entry = new WorkflowRequestTableRecord();
            	List<WorkflowRequestTableField> wrtis_entry = new ArrayList<WorkflowRequestTableField>();
            	value.forEach((key_col, value_col)->{
            		//单个信息
            		WorkflowRequestTableField wrti_entry = new WorkflowRequestTableField();
            		wrti_entry.setFieldName(value_col.getXml());
            		
            		String type = value_col.getType();
            		String xml = value_col.getXml();
            		if("A".equalsIgnoreCase(type)) {
            			wrti_entry.setFieldValue(value_col.getField());
            		}else if("B".equalsIgnoreCase(type)) {
            			//需要进行再次映射
            			wrti_entry.setFieldValue((String) col_dy.get(value_col.getField()));
            		}else if("C".equalsIgnoreCase(type)) {
            			wrti_entry.setFieldValue(getUserId(xml, col_dy.getDynamicObject(value_col.getField())));
                	}else if ("D".equalsIgnoreCase(type)) {
                		wrti_entry.setFieldValue(getOrgId(xml, col_dy.getDynamicObject(value_col.getField())));
        			}else if("E".equalsIgnoreCase(type)) {
                		wrti_entry.setFieldValue(getDocInfo(col_dy.getString(value_col.getField()),col_dy.getString("printedfilename")));
                	}
            		wrti_entry.setView(true);
            		wrti_entry.setEdit(true);
            		wrtis_entry.add(wrti_entry);
            	});
            	wrtri_entry.setWorkflowRequestTableFields(wrtis_entry.toArray(new WorkflowRequestTableField[wrtis_entry.size()]));
            	wrtris_entry.add(wrtri_entry);
        	});
        	wdti_entry.setWorkflowRequestTableRecords(wrtris_entry.toArray(new WorkflowRequestTableRecord[wrtris_entry.size()]));
        	wdtis_entry.add(wdti_entry);
        });
        
        WorkflowBaseInfo wbi = new WorkflowBaseInfo();
        wbi.setWorkflowId("369");//workflowid 5 代表内部留言
        
        WorkflowRequestInfo wri = new WorkflowRequestInfo();//流程基本信息
        wri.setCreatorId(getCurrencyUserFWID());//创建人id
        wri.setRequestLevel("2");//0 正常，1重要，2紧急
        wri.setRequestName("OA用印测试接口");//流程标题
        wri.setWorkflowMainTableInfo(wmi_head);//添加主字段数据
        wri.setWorkflowBaseInfo(wbi);
        wri.setWorkflowDetailTableInfos(wdtis_entry.toArray(new WorkflowDetailTableInfo[wdtis_entry.size()]));
		
		return wri;
	}
	
	private String getTime(Date date) {
		SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd");
		String dateString = formatter.format(date);
		return dateString;
	}
	
	private String getOrgId(String xml, DynamicObject this_dy) {
		this_dy = BusinessDataServiceHelper.loadSingle(this_dy.getPkValue(), this_dy.getDynamicObjectType().getName(), "id,name," + ORGFIELD);
		String value = this_dy.getString(ORGFIELD);
		
		value = mapValueFunction(xml, value);
		
		DynamicObject orgId_dy = BusinessDataServiceHelper.loadSingle(ORGBUFFER, "bfgy_number,bfgy_name,bfgy_oaid", new QFilter[]{new QFilter("bfgy_number", QCP.equals, value)});
		if(orgId_dy != null && orgId_dy.getString("bfgy_oaid") != null) {
			return orgId_dy.getString("bfgy_oaid");
		}else {
			String orgId;
			try {
				orgId = postGetOrgId(value);
			} catch (MalformedURLException | RemoteException e) {
				// TODO Auto-generated catch block
//				e.printStackTrace();
				throw new KDBizException("向泛微获取组织ID出错，请检查相应配置以及网络！");
			}
			if(Integer.parseInt(orgId) > 0 && ISORGBUFFER) {
				DynamicObject new_dy = BusinessDataServiceHelper.newDynamicObject(ORGBUFFER);
				new_dy.set("bfgy_number", value);
				new_dy.set("bfgy_name", this_dy.getString("name"));
				new_dy.set("bfgy_oaid", orgId);
				SaveServiceHelper.save(new DynamicObject[] {new_dy});
			}
			return orgId;
		}
	}
	
	/**
	 * 获得用户泛微系统ID
	 * @param this_dy
	 * @return
	 * @throws IOException
	 * @throws IOException
	 */
	private String getUserId(String xml, DynamicObject this_dy) {
		this_dy = BusinessDataServiceHelper.loadSingle(this_dy.getPkValue(), this_dy.getDynamicObjectType().getName(), "id,name," + USERFIELD);
		String value = this_dy.getString(USERFIELD);
		
		value = mapValueFunction(xml, value);
		
		DynamicObject userId_dy = BusinessDataServiceHelper.loadSingle(BUFFER, "bfgy_number,bfgy_name,bfgy_oaid", new QFilter[]{new QFilter("bfgy_number", QCP.equals, value)});
		if (userId_dy != null && userId_dy.getString("bfgy_oaid") != null) {
			return userId_dy.getString("bfgy_oaid");
		} else {
			String userId;
			try {
				userId = postGetId(value, USTERTYPE);
			} catch (MalformedURLException | RemoteException e) {
				// TODO Auto-generated catch block
//				e.printStackTrace();
				throw new KDBizException("向泛微获取人员ID出错，请检查相应配置以及网络！");
			}
			if(Integer.parseInt(userId) > 0 && ISBUFFER) {
				DynamicObject new_dy = BusinessDataServiceHelper.newDynamicObject(BUFFER);
				new_dy.set("bfgy_number", value);
				new_dy.set("bfgy_name", this_dy.getString("name"));
				new_dy.set("bfgy_oaid", userId);
				SaveServiceHelper.save(new DynamicObject[] {new_dy});
			}
			return userId;
		}
	}
	
	/**
	 * 创建文档接口
	 * @param docInfo
	 * @param session
	 * @return
	 * @throws RemoteException
	 * @throws MalformedURLException
	 */
	private int postCreateDoc(DocInfo docInfo, String session) throws RemoteException, MalformedURLException {
		//执行创建文件接口
        String wsdl = DOCURL;
        Service service = new Service();
        DocServiceHttpBindingStub stub = new DocServiceHttpBindingStub(new URL(wsdl), service);
        Integer id = stub.createDoc(docInfo, session);
		return id;
	}
	
	private String getCurrencyUserFWID() {
		if (StringUtils.isBlank(CURRENCTUSERID)) {
			DynamicObject user = UserServiceHelper.getCurrentUser(USERFIELD);
			CURRENCTUSERID = getUserId("THIS" ,user);
		}
		return CURRENCTUSERID;
	}
	
	private String getIP() {
		String IP = RequestContext.get().getLoginIP();
		return IP;
	}
	
	
	private String postLogin() throws RemoteException, MalformedURLException {
		//执行创建文件接口
        String wsdl = URL;
        Service service = new Service();
        DocServiceHttpBindingStub stub = new DocServiceHttpBindingStub(new URL(wsdl), service);
        String session = stub.login(ACCOUNT, PASSWORD, 0, getIP());
		return session;
	}
	
	
	/**
	 * 文档信息
	 * @param url
	 * @return
	 * @throws  
	 * @throws RemoteException 
	 */
	private String getDocInfo(String url, String name) {
		FileService fs=FileServiceFactory.getAttachmentFileService();
		InputStream input = fs.getInputStream(url);
		
		byte[] content = new byte[102400];
		// 上传附件，创建html文档
		content = null;
		try {
			int byteread;
			byte data[] = new byte[1024];

			ByteArrayOutputStream out = new ByteArrayOutputStream();
			while ((byteread = input.read(data)) != -1) {
				out.write(data, 0, byteread);
				out.flush();
			}
			content = out.toByteArray();
			input.close();
			out.close();
		} catch (Exception e) {
			e.printStackTrace();
		}

		
		DocAttachment da = new DocAttachment();
		da.setDocid(0);
		da.setImagefileid(0);
		da.setFilecontent(Base64.encode(content));
		da.setFilerealpath("url");
		da.setIszip(1);
		da.setFilename(name);
		da.setIsextfile("1");
		da.setDocfiletype("3");

		DocInfo doc = new DocInfo();//创建文档
		doc.setDoccreaterid(111);//
		doc.setDoccreatertype(0);
		doc.setAccessorycount(1);
		doc.setMaincategory(0);//主目录id
		doc.setSubcategory(0);//分目录id
		doc.setSeccategory(701);//子目录id
		doc.setOwnerid(111);
		doc.setDocStatus(1);
		doc.setId(0);
		doc.setDocType(2);
		doc.setDocSubject("service html 文档");
		doc.setDoccontent("service html 文档 content 22222");
		doc.setAttachments(new DocAttachment[] { da });
		
		Integer res = null;
		try {
			res = postCreateDoc(doc, postLogin());
		} catch (RemoteException | MalformedURLException e) {
			// TODO Auto-generated catch block
//			e.printStackTrace();
			throw new KDBizException(e.getMessage());
		}
		return res.toString();
	}
}
