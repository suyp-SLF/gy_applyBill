package kd.cus.wb.usethe;

import kd.bos.bill.AbstractBillPlugIn;
import kd.bos.context.RequestContext;
import kd.bos.dataentity.entity.DynamicObject;
import kd.bos.dataentity.entity.DynamicObjectCollection;
import kd.bos.exception.KDBizException;
import kd.bos.form.control.events.ItemClickEvent;
import kd.bos.logging.Log;
import kd.bos.logging.LogFactory;
import kd.bos.orm.query.QFilter;
import kd.bos.servicehelper.BusinessDataServiceHelper;
import kd.bos.servicehelper.PrintServiceHelper;
import kd.bos.servicehelper.TimeServiceHelper;
import kd.bos.servicehelper.operation.SaveServiceHelper;
import kd.bos.servicehelper.parameter.SystemParamServiceHelper;
import kd.bos.servicehelper.user.UserServiceHelper;
import kd.bos.servicehelper.workflow.WorkflowServiceHelper;
import kd.bos.session.EncreptSessionUtils;
import kd.bos.workflow.component.approvalrecord.IApprovalRecordGroup;
import kd.bos.workflow.component.approvalrecord.IApprovalRecordItem;
import kd.cus.etl.toebs.SomeUtils;
import kd.cus.etl.webservices.cn.com.weaver.jmyysq.webservices.CreateJMYYSQWorkflowPortTypeProxy;
import kd.cus.etl.webservices.localhost.services.DocService.DocServiceLocator;
import kd.cus.etl.webservices.localhost.services.DocService.DocServicePortType;
import kd.cus.etl.webservices.weaver.docs.webservices.DocAttachment;
import kd.cus.etl.webservices.weaver.docs.webservices.DocInfo;

import org.apache.axis.encoding.Base64;
import org.apache.commons.lang3.StringUtils;
import org.apache.poi.hssf.usermodel.*;
import org.apache.poi.ss.usermodel.HorizontalAlignment;
import org.apache.poi.ss.usermodel.VerticalAlignment;
import org.w3c.dom.Document;
import org.w3c.dom.Element;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.rpc.ServiceException;
import javax.xml.transform.*;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.InputStream;
import java.io.StringWriter;
import java.net.HttpURLConnection;
import java.net.MalformedURLException;
import java.net.URL;
import java.rmi.RemoteException;
import java.sql.Connection;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.Iterator;
import java.util.List;

public class OAarchiveoppoPluginno extends AbstractBillPlugIn {
    private static final Log logger = LogFactory.getLog(OAarchiveoppoPluginno.class);
    private static DocServicePortType service = null;
    private static String finip = "{IP}";
    private static String serviceurl = "http://{IP}/services/DocService";


    static {
//        DynamicObject[] load = BusinessDataServiceHelper.load("bfgy_oaconfig", "ip", (QFilter[])null);
        String ip = SystemParamServiceHelper.loadBillParameterObjectFromCache("bfgy_printapplication").get("bfgy_ipfield").toString();
        if (StringUtils.isNotBlank(ip)) {
            serviceurl = serviceurl.replace("{IP}", ip);
            finip = finip.replace("{IP}", ip);
        }
    }

    public void itemClick(ItemClickEvent evt) {


        super.itemClick(evt);
        String operate = evt.getOperationKey();
        logger.info("获取OperationKey：" + operate);
        if ("Archive_wb".equalsIgnoreCase(operate)) {
            DynamicObjectCollection annexall = this.getView().getModel().getEntryEntity("printentry");

            try {
                service = (new DocServiceLocator()).getDocServiceHttpPort(new URL(serviceurl));
                String loginid = "xuyang";//"bgsystem"
                String password = "123qwe!";//"1"
                int logintype = 0;
                String ip = finip;
                String session = getSession(loginid, password, logintype, ip);
                Object pkValue = this.getView().getParentView().getModel().getDataEntity().getPkValue();
                List<IApprovalRecordGroup> approvalRecordGroups = WorkflowServiceHelper.getAllApprovalRecord(pkValue.toString());
                Integer approvalid;
                if (approvalRecordGroups != null && approvalRecordGroups.size() != 0) {
                    approvalid = createNewDocinput(session, "spyj.xls", writeListToFile(approvalRecordGroups));
                } else {
                    approvalid = 0;
                }

                List<Integer> annexIdlist = new ArrayList();
                int i = 0;

                while(true) {
                    String annexurl;
                    String annexname;
                    if (i >= annexall.size()) {
                        String xmlInfo = BeantoXml(this.getModel().getDataEntity(true), approvalid, annexIdlist);
                        System.out.println("xmlInfo: " + xmlInfo);
                        annexurl = this.getModel().getValue("billno").toString();
                        annexname = "OA用印";
                        ArrayList<Object> arr = SomeUtils.connMysqlNoMsg(annexurl);
                        if ((Boolean)arr.get(0)) {
                            return;
                        }

                        Connection conn = (Connection)arr.get(1);
                        int seq = SomeUtils.createSeq(conn, annexname);
                        DynamicObject logBill = BusinessDataServiceHelper.newDynamicObject("bfgy_ebslog");
                        logBill.set("reqseq", String.valueOf(seq));
                        logBill.set("user", UserServiceHelper.getCurrentUserId());
                        logBill.set("bill", annexurl);
                        logBill.set("type", annexname);
                        logBill.set("reqtype", annexname);
                        logBill.set("time", TimeServiceHelper.getCurrentSystemTime());
                        logBill.set("issuccess", false);
                        logBill.set("reqmsg", xmlInfo);
                        CreateJMYYSQWorkflowPortTypeProxy proxy = new CreateJMYYSQWorkflowPortTypeProxy();
                        String result = proxy.createJMRequest(xmlInfo, "jm");
                        logBill.set("logss", "返回结果：" + result);
                        if (Integer.parseInt(result) > 0) {
                            logBill.set("issuccess", true);
                            this.getModel().setValue("billstatus", "D");
                            this.getView().setEnable(false, new String[]{"baritemap"});
                            QFilter qFilter = new QFilter("billno", "=", this.getModel().getValue("billno"));
                            DynamicObject[] load = BusinessDataServiceHelper.load("bfgy_printapplication", "billno,billstatus,sourcenumber,printdocumenttype,purchasecontract", new QFilter[]{qFilter});
                            SaveServiceHelper.save(new DynamicObject[]{load[0]});
                            String form = (String)this.getModel().getValue("printdocumenttype");
                            System.out.println(form);
                            QFilter qFilter1;
                            DynamicObject[] load1;
                            DynamicObject aDynamicObject;
                            int var28;
                            int var29;
                            DynamicObject[] var30;
                            if ("0".equals(form)) {
                                qFilter1 = new QFilter("billno", "=", this.getModel().getValue("purchasecontract"));
                                load1 = BusinessDataServiceHelper.load("pm_purorderbill", "billno,usesign_bf", new QFilter[]{qFilter1});
                                var30 = load1;
                                var29 = load1.length;

                                for(var28 = 0; var28 < var29; ++var28) {
                                    aDynamicObject = var30[var28];
                                    aDynamicObject.set("usesign_bf", "b");
                                    SaveServiceHelper.save(new DynamicObject[]{aDynamicObject});
                                }
                            } else if ("1".equals(form)) {
                                qFilter1 = new QFilter("billno", "=", this.getModel().getValue("sourcenumber"));
                                load1 = BusinessDataServiceHelper.load("pm_xpurorderbill", "billno,usesign_bf", new QFilter[]{qFilter1});
                                var30 = load1;
                                var29 = load1.length;

                                for(var28 = 0; var28 < var29; ++var28) {
                                    aDynamicObject = var30[var28];
                                    aDynamicObject.set("usesign_bf", "b");
                                    SaveServiceHelper.save(new DynamicObject[]{aDynamicObject});
                                }
                            } else if ("2".equals(form)) {
                                qFilter1 = new QFilter("billno", "=", this.getModel().getValue("sourcenumber"));
                                load1 = BusinessDataServiceHelper.load("im_saloutbill", "billno,sealstatus", new QFilter[]{qFilter1});
                                var30 = load1;
                                var29 = load1.length;

                                for(var28 = 0; var28 < var29; ++var28) {
                                    aDynamicObject = var30[var28];
                                    aDynamicObject.set("sealstatus", "b");
                                    SaveServiceHelper.save(new DynamicObject[]{aDynamicObject});
                                }
                            } else if ("3".equals(form)) {
                                qFilter1 = new QFilter("billno", "=", this.getModel().getValue("sourcenumber"));
                                load1 = BusinessDataServiceHelper.load("im_purinbill", "billno,sealstatus", new QFilter[]{qFilter1});
                                var30 = load1;
                                var29 = load1.length;

                                for(var28 = 0; var28 < var29; ++var28) {
                                    aDynamicObject = var30[var28];
                                    aDynamicObject.set("sealstatus", "b");
                                    SaveServiceHelper.save(new DynamicObject[]{aDynamicObject});
                                }
                            } else if ("4".equals(form)) {
                                qFilter1 = new QFilter("billno", "=", this.getModel().getValue("sourcenumber"));
                                load1 = BusinessDataServiceHelper.load("bfgy_agency_agreement", "billno,sealstatus", new QFilter[]{qFilter1});
                                var30 = load1;
                                var29 = load1.length;

                                for(var28 = 0; var28 < var29; ++var28) {
                                    aDynamicObject = var30[var28];
                                    aDynamicObject.set("sealstatus", "b");
                                    SaveServiceHelper.save(new DynamicObject[]{aDynamicObject});
                                }
                            } else if ("5".equals(form)) {
                                qFilter1 = new QFilter("billno", "=", this.getModel().getValue("sourcenumber"));
                                load1 = BusinessDataServiceHelper.load("im_transdirbill", "billno,sealstatus", new QFilter[]{qFilter1});
                                var30 = load1;
                                var29 = load1.length;

                                for(var28 = 0; var28 < var29; ++var28) {
                                    aDynamicObject = var30[var28];
                                    aDynamicObject.set("sealstatus", "b");
                                    SaveServiceHelper.save(new DynamicObject[]{aDynamicObject});
                                }
                            }
                        }

                        SaveServiceHelper.save(new DynamicObject[]{logBill});
                        break;
                    }

                    annexurl = ((DynamicObject)annexall.get(i)).getString("applyurl1");
                    annexname = ((DynamicObject)annexall.get(i)).getString("printedfilename");
                    String flag = ((DynamicObject)annexall.get(i)).getString("combofield");
                    String form = (String)this.getModel().getValue("printdocumenttype");
                    if (annexurl == null || annexname == null || "".equals(annexurl) || "".equals(annexname)) {
                        this.getView().showErrorNotification("请选择用印附件并保存!");
                        return;
                    }

                    String session1 = getSession(loginid, password, logintype, ip);
                    Integer a = null;
                    Object pkId = this.getView().getParentView().getModel().getDataEntity().getPkValue();
                    logger.info("获取flag：" + flag + "; 获取form：" + form);
                    if ("0".equals(flag)) {
                        a = createNewDoc(session1, annexname, annexurl);
                    } else if ("2".equals(form)) {
                        InputStream input = new ByteArrayInputStream(PrintServiceHelper.createSinglePdf(this.getView().getParentView().getPageId(), "im_saloutbill", "bfgy_im_saloutbill_prt_test", pkId));
                        a = createNewDocinput(session1, annexname, input);
                    } else {
                        byte[] abc = PrintServiceHelper.createSinglePdf(this.getView().getPageId(), "im_purinbill", "bfgy_im_purinbill_prt_test", pkId);
                        InputStream input = new ByteArrayInputStream(abc);
                        a = createNewDocinput(session1, annexname, input);
                    }

                    if (a != null) {
                        annexIdlist.add(a);
                    }

                    ++i;
                }
            } catch (Exception var31) {
                var31.printStackTrace();
                throw new KDBizException("调用OA接口失败:" + var31.getCause());
            }

            this.getView().showTipNotification("调用完成");
        }
    }

    private static String getSession(String loginid, String password, int logintype, String ip) throws MalformedURLException, ServiceException, RemoteException {
        String session = service.login(loginid, password, logintype, ip);
        return session;
    }

    private static int createNewDoc(String session, String filename, String url) throws RemoteException {
        long a = (new Date()).getTime();
        System.out.println("开始:" + a);
        byte[] content = new byte[1024000];
        content = null;
        HttpURLConnection conn = null;

        try {
            URL httpUrl = null;
            logger.info("苍穹文件地址：" + url);
            if (url.contains("kdedcba")) {
                httpUrl = new URL(url);
            } else {
                httpUrl = new URL(EncreptSessionUtils.encryptSession(url));
            }

            conn = (HttpURLConnection)httpUrl.openConnection();
            conn.setRequestMethod("GET");
            conn.setConnectTimeout(30000);
            conn.setReadTimeout(30000);
            logger.info("苍穹文件ResponseMessage：" + conn.getResponseMessage());
            InputStream inStream = conn.getInputStream();
            byte[] data = new byte[1024];
            ByteArrayOutputStream out = new ByteArrayOutputStream();

            int byteread;
            while((byteread = inStream.read(data)) != -1) {
                out.write(data, 0, byteread);
                out.flush();
            }

            content = out.toByteArray();
            if (content != null && content.length < 512 && content.toString().contains("file is not exist.")) {
                throw new KDBizException("调用OA接口失败: 用印文件不存在。");
            }

            inStream.close();
            out.close();
        } catch (Exception var15) {
            logger.error(var15);
            var15.printStackTrace();
        } finally {
            if (conn != null) {
                conn.disconnect();
            }

        }

        DocAttachment da = new DocAttachment();
        da.setDocid(0);
        da.setImagefileid(0);
        da.setFilecontent(Base64.encode(content));
        da.setIszip(1);
        da.setFilerealpath("d:\\" + filename);
        da.setFilename(filename);
        da.setIsextfile("1");
        da.setDocfiletype("5");
        DocInfo doc = new DocInfo();
        doc.setDoccreaterid(1);
        doc.setDoccreatertype(0);
        doc.setAccessorycount(1);
        doc.setMaincategory(21);
        doc.setSubcategory(22);
        doc.setSeccategory(9442);
        doc.setOwnerid(1);
        doc.setDocStatus(1);
        doc.setId(0);
        doc.setDocType(2);
        doc.setDocSubject(filename);
        doc.setAttachments(new DocAttachment[]{da});
        long b = (new Date()).getTime();
        System.out.println("结束:" + b);
        System.out.println("总共耗时:" + (b - a));
        return service.createDoc(doc, session);
    }

    private static int createNewDocinput(String session, String filename, InputStream input) throws RemoteException {
        long a = (new Date()).getTime();
        System.out.println("开始:" + a);
        byte[] content = new byte[1024000];
        content = null;

        try {
            byte[] data = new byte[1024];
            ByteArrayOutputStream out = new ByteArrayOutputStream();

            int byteread;
            while((byteread = input.read(data)) != -1) {
                out.write(data, 0, byteread);
                out.flush();
            }

            content = out.toByteArray();
            input.close();
            out.close();
        } catch (Exception var10) {
            var10.printStackTrace();
        }

        DocAttachment da = new DocAttachment();
        da.setDocid(0);
        da.setImagefileid(0);
        da.setFilecontent(Base64.encode(content));
        da.setFilerealpath("d:\\" + filename);
        da.setIszip(1);
        da.setFilename(filename);
        da.setIsextfile("1");
        da.setDocfiletype("5");
        DocInfo doc = new DocInfo();
        doc.setDoccreaterid(1);
        doc.setDoccreatertype(0);
        doc.setAccessorycount(1);
        doc.setMaincategory(21);
        doc.setSubcategory(22);
        doc.setSeccategory(9442);
        doc.setOwnerid(1);
        doc.setDocStatus(1);
        doc.setId(0);
        doc.setDocType(2);
        doc.setDocSubject(filename);
        doc.setAttachments(new DocAttachment[]{da});
        System.out.println("文档1的id:" + service.createDoc(doc, session));
        long b = (new Date()).getTime();
        System.out.println("结束:" + b);
        System.out.println("总共耗时:" + (b - a));
        return service.createDoc(doc, session);
    }

    public static InputStream writeListToFile(List<IApprovalRecordGroup> Approvalflowlist) throws Exception {
        HSSFWorkbook workbook = new HSSFWorkbook();
        HSSFCellStyle style = workbook.createCellStyle();
        style.setVerticalAlignment(VerticalAlignment.CENTER);
        style.setAlignment(HorizontalAlignment.CENTER);
        HSSFSheet sheet = workbook.createSheet("审批流信息");
        HSSFFont font2 = workbook.createFont();
        font2.setFontName("黑体");
        font2.setFontHeightInPoints((short) 12);
        sheet.setColumnWidth(2, 5120);
        sheet.setColumnWidth(3, 5120);
        sheet.setColumnWidth(5, 3840);
        HSSFRow head = sheet.createRow(0);
        head.createCell(1).setCellValue("审批信息");
        HSSFRow body = sheet.createRow(sheet.getLastRowNum() + 1);
        body.createCell(1).setCellValue("审批结果");
        body.createCell(2).setCellValue("审批时间");
        body.createCell(3).setCellValue("代理人");
        body.createCell(4).setCellValue("信息");
        body.createCell(5).setCellValue("审批流程节点");
        ByteArrayOutputStream fos = new ByteArrayOutputStream();
        if (Approvalflowlist != null && Approvalflowlist.size() > 0) {
            Iterator var9 = Approvalflowlist.iterator();

            while (var9.hasNext()) {
                IApprovalRecordGroup approvalRecordGroup = (IApprovalRecordGroup) var9.next();
                HSSFRow body1 = sheet.createRow(sheet.getLastRowNum() + 1);

                for (int i = 0; i < approvalRecordGroup.getChildren().size(); ++i) {
                    body1.createCell(1).setCellValue(((IApprovalRecordItem) approvalRecordGroup.getChildren().get(i)).getResult());
                    body1.createCell(2).setCellValue(((IApprovalRecordItem) approvalRecordGroup.getChildren().get(i)).getTime());
                    body1.createCell(3).setCellValue(((IApprovalRecordItem) approvalRecordGroup.getChildren().get(i)).getAssignee());
                    body1.createCell(4).setCellValue(((IApprovalRecordItem) approvalRecordGroup.getChildren().get(i)).getMessage());
                    body1.createCell(5).setCellValue(((IApprovalRecordItem) approvalRecordGroup.getChildren().get(i)).getActivityName());
                }
            }

            workbook.write(fos);
            fos.close();
        }
        return new ByteArrayInputStream(fos.toByteArray());
    }

    public static String BeantoXml(DynamicObject object, Integer approvalid, List<Integer> annexList) {
        String param = null;
        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();

        try {
            DocumentBuilder builder = factory.newDocumentBuilder();
            Document document = builder.newDocument();
            document.setXmlStandalone(true);
            Element PRINTAPPLICATION = document.createElement("PRINTAPPLICATION");
            Element BASE = document.createElement("BASE");
            Element BILLNO = document.createElement("BILLNO");
            BILLNO.setTextContent(object.getString("billno"));
            Element BILLSTATUS = document.createElement("BILLSTATUS");
            BILLSTATUS.setTextContent(object.getString("billstatus"));
            Element BILLSOURCE = document.createElement("BILLSOURCE");
            BILLSOURCE.setTextContent(object.getString("billsource"));
            Element SECURITYTYPE = document.createElement("SECURITYTYPE");
            SECURITYTYPE.setTextContent(object.getString("securitytype"));
            Element SECURITYTIME = document.createElement("SECURITYTIME");
            SECURITYTIME.setTextContent(object.getString("securitytime"));
            Element SOURCENUMBER = document.createElement("SOURCENUMBER");
            if (object.getString("sourcenumber") != null && !" ".equals(object.getString("sourcenumber")) && !"".equals(object.getString("sourcenumber"))) {
                SOURCENUMBER.setTextContent(object.getString("sourcenumber"));
            } else {
                SOURCENUMBER.setTextContent("nodata");
            }

            Element SRCTYPE_BF = document.createElement("SRCTYPE_BF");
            SRCTYPE_BF.setTextContent(object.getString("printdocumenttype"));
            Element PURCHASECONTRACT = document.createElement("PURCHASECONTRACT");
            String abString = object.getString("purchasecontract");
            if (abString != null && !" ".equals(abString) && !"".equals(abString)) {
                PURCHASECONTRACT.setTextContent(abString);
            } else {
                PURCHASECONTRACT.setTextContent("nodate");
            }

            Element CREATORID = document.createElement("CREATORID");
            CREATORID.setTextContent(object.getDynamicObject("creator").getString("username"));
            Element ORGID = document.createElement("ORGID");
            ORGID.setTextContent(object.getString("org"));
            Element APPROVALFLOW = document.createElement("APPROVALFLOW");
            APPROVALFLOW.setTextContent(approvalid.toString());
            Date date1 = new Date();
            SimpleDateFormat sd1 = new SimpleDateFormat("yyyy-MM-dd");
            String format1 = sd1.format(date1);
            Element CREATETIME = document.createElement("CREATETIME");
            CREATETIME.setTextContent(format1);
            Element TEL = document.createElement("TEL");
            String abString1 = object.getString("tel");
            if (abString1 != null && !" ".equals(abString1) && !"".equals(abString1)) {
                TEL.setTextContent(abString1);
            } else {
                TEL.setTextContent("0000");
            }

            Element PRINTCAUSE = document.createElement("PRINTCAUSE");
            PRINTCAUSE.setTextContent(object.getString("printcause"));
            Element SEALTYPE = document.createElement("SEALTYPE");
            SEALTYPE.setTextContent(object.getString("sealtype"));
            Element PRINTTYPE = document.createElement("PRINTTYPE");
            PRINTTYPE.setTextContent(object.getString("printtype"));
            Element DEPARTMENTLEADER = document.createElement("DEPARTMENTLEADER");
            DEPARTMENTLEADER.setTextContent(object.getDynamicObject("departmentleader").getString("username"));
            Element PRINTER = document.createElement("PRINTER");
            PRINTER.setTextContent(object.getDynamicObject("printer").getString("username"));

            Element AUDITOR = document.createElement("AUDITOR");
            /*万宝新添*/
            if (object.getDynamicObject("auditor")!= null && StringUtils.isNotBlank(object.getDynamicObject("auditor").getString("number"))) {
                AUDITOR.setTextContent(object.getDynamicObject("auditor").getString("number"));
            }

            Element REMAKE = document.createElement("REMAKE");
            String aa = object.getString("remake");
            if (aa != null && !" ".equals(aa) && !"".equals(aa)) {
                REMAKE.setTextContent(aa);
            } else {
                REMAKE.setTextContent("noremark");
            }

            BASE.appendChild(BILLNO);
            BASE.appendChild(BILLSTATUS);
            BASE.appendChild(BILLSOURCE);
            BASE.appendChild(SECURITYTYPE);
            BASE.appendChild(SECURITYTIME);
            BASE.appendChild(SOURCENUMBER);
            BASE.appendChild(SRCTYPE_BF);
            BASE.appendChild(PURCHASECONTRACT);
            BASE.appendChild(CREATORID);
            BASE.appendChild(ORGID);
            BASE.appendChild(APPROVALFLOW);
            BASE.appendChild(CREATETIME);
            BASE.appendChild(TEL);
            BASE.appendChild(PRINTCAUSE);
            BASE.appendChild(SEALTYPE);
            BASE.appendChild(PRINTTYPE);
            BASE.appendChild(DEPARTMENTLEADER);
            BASE.appendChild(PRINTER);

            /*万宝新添字段*/
            BASE.appendChild(AUDITOR);

            BASE.appendChild(REMAKE);
            PRINTAPPLICATION.appendChild(BASE);
            Element ENTRY = document.createElement("ENTRY");
            DynamicObjectCollection attentity = object.getDynamicObjectCollection("printentry");
            if (attentity != null) {
                for(int i = 0; i < attentity.size(); ++i) {
                    Element INFO = document.createElement("INFO");
                    Element PRINTEDFILENAME = document.createElement("PRINTEDFILENAME");
                    PRINTEDFILENAME.setTextContent(((DynamicObject)attentity.get(i)).getString("printedfilename"));
                    Element SECRETLEVEL = document.createElement("SECRETLEVEL");
                    SECRETLEVEL.setTextContent(((DynamicObject)attentity.get(i)).getString("secretlevel"));
                    Element SECRETTIME = document.createElement("SECRETTIME");
                    SECRETTIME.setTextContent(((DynamicObject)attentity.get(i)).getString("secrettime"));
                    Element FILENUM = document.createElement("FILENUM");
                    FILENUM.setTextContent(((DynamicObject)attentity.get(i)).getString("filenum"));
                    Element ANNEX = document.createElement("ANNEX");
                    ANNEX.setTextContent(((Integer)annexList.get(i)).toString());
                    Element PERSTAMP = document.createElement("PERSTAMP");
                    PERSTAMP.setTextContent(((DynamicObject)attentity.get(i)).getString("perstamp"));
                    Element REVERSE = document.createElement("REVERSE");
                    REVERSE.setTextContent(((DynamicObject)attentity.get(i)).getString("reverse"));
                    Element DELIVERYORG = document.createElement("DELIVERYORG");
                    DELIVERYORG.setTextContent(((DynamicObject)attentity.get(i)).getString("deliveryorg"));
                    Element STAMPTYPE = document.createElement("STAMPTYPE");
                    STAMPTYPE.setTextContent(((DynamicObject)attentity.get(i)).getString("stamptype"));

                    /*万宝新添*/
                    Element OPPOSITE = document.createElement("OPPOSITE");
                    if (StringUtils.isNotBlank(((DynamicObject)attentity.get(i)).getString("bfgy_opposite_wb"))){
                        OPPOSITE.setTextContent(((DynamicObject) attentity.get(i)).getString("bfgy_opposite_wb"));
                    }
                    Element CONAMT = document.createElement("CONAMT");
                    if (StringUtils.isNotBlank(((DynamicObject)attentity.get(i)).getString("bfgy_conamt_wb"))) {
                        CONAMT.setTextContent(((DynamicObject) attentity.get(i)).getString("bfgy_conamt_wb"));
                    }
                    Element CONCURCY = document.createElement("CONCURCY");
                    if (((DynamicObject)attentity.get(i)).getDynamicObject("bfgy_concurcy_wb")!=null&&StringUtils.isNotBlank(((DynamicObject)attentity.get(i)).getDynamicObject("bfgy_concurcy_wb").getString("number"))) {
                        CONCURCY.setTextContent(((DynamicObject) attentity.get(i)).getDynamicObject("bfgy_concurcy_wb").getString("number"));
                    }

                    ENTRY.appendChild(INFO);
                    INFO.appendChild(PRINTEDFILENAME);
                    INFO.appendChild(SECRETLEVEL);
                    INFO.appendChild(SECRETTIME);
                    INFO.appendChild(FILENUM);
                    INFO.appendChild(ANNEX);
                    INFO.appendChild(PERSTAMP);
                    INFO.appendChild(REVERSE);
                    INFO.appendChild(DELIVERYORG);
                    INFO.appendChild(STAMPTYPE);

                    /*万宝新添*/
                    INFO.appendChild(OPPOSITE);
                    INFO.appendChild(CONAMT);
                    INFO.appendChild(CONCURCY);
                }
            }

            PRINTAPPLICATION.appendChild(ENTRY);
            document.appendChild(PRINTAPPLICATION);
            Source sources = new DOMSource(document);
            StringWriter stringWriter = new StringWriter();
            Result result = new StreamResult(stringWriter);
            TransformerFactory transFactory = TransformerFactory.newInstance();
            Transformer transformer = transFactory.newTransformer();
            transformer.setOutputProperty("indent", "yes");
            transformer.setOutputProperty("encoding", "utf-8");
            transformer.transform(sources, result);
            param = stringWriter.getBuffer().toString();
        } catch (ParserConfigurationException var47) {
            var47.printStackTrace();
        } catch (TransformerConfigurationException var48) {
            var48.printStackTrace();
        } catch (TransformerException var49) {
            var49.printStackTrace();
        }

        return param;
    }


}
